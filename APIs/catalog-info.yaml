apiVersion: backstage.io/v1alpha1
kind: API
metadata:
  name: artist-api
  description: Retrieve artist details
spec:
  type: openapi
  lifecycle: production
  owner: artist-relations-team
  system: artist-engagement-portal
  definition: |
    openapi: 3.0.0
    info:
      title: Telstra Messaging API10
      description: |

        # Introduction

        <table><tbody><tr><td class = 'into_api' style='border:none;padding:0 0 0 0'><p>Send and receive SMS and MMS messages globally using Telstra?s enterprise grade Messaging API. It also allows your application to track the delivery status of both sent and received messages. Get your dedicated Australian number, and start sending and receiving messages today.</p></td></tr></tbody></table>

        # Features
        Telstra Messaging API10 provides below features. 

         | Feature | Description |
        |---|---|
        |`Dedicated Number` | Provision a mobile number for your account to be used as `from` address in the API |
        |`Send Messages` | Sending SMS or MMS messages |
        |`Receive Messages` | Telstra will deliver messages sent to a dedicated number or to the `notifyURL` defined by you |
        |`Broadcast Messages` | Invoke a single API call to send a message to a list of numbers provided in `to` |
        |`Delivery Status` | Query the delivery status of your messages |
        |`Callbacks` | Provide a notification URL and Telstra will notify your app when a message status changes |
        |`Alphanumeric Identifier` | Differentiate yourself by providing an alphanumeric string in `from`. This feature is only available on paid plans |
        |`Concatenation` | Send messages up to 1900 characters long and Telstra will automaticaly segment and reassemble them |
        |`Reply Request` | Create a chat session by associating `messageId` and `to` number to track responses received from a mobile number. We will store this association for 8 days |
        |`Character set` | Accepts all Unicode characters as part of UTF-8 |
        |`Bounce-back response` | See if your SMS hits an unreachable or unallocated number (Australia Only) |
        |`Queuing` | Messaging API will automatically queue and deliver each message at a compliant rate. |
        |`Emoji Encoding` | The API supports the encoding of the full range of emojis. Emojis in the reply messages will be in their UTF-8 format. |

        # Getting Access to the API


        1. Reach out to the API-Owner or API-Support team for getting access to the API.



        Now head over to **Getting Started** where you can find more details about the API.

        # Getting Started

        Below are the steps to get started with the Telstra Messaging API10.
          1. Generate an OAuth2 Token using your `Client key` and `Client secret`.
          2. Use OAuth Token to Trigger a Request to Messaging API10


        # Frequently Asked Questions

        **Q: Can I send a broadcast message using the Telstra Messaging API10?**
        A. Yes. Recipient numbers can be in the form of an array of strings if a broadcast message needs to be sent.

        **Q: How can i get support for this API?**
        A. apisupport@team.telstra.com

        ## Notes
        <a href="http://petstore.swagger.io/?url=https://raw.githubusercontent.com/telstra/MessagingAPI-v2/master/docs/swagger/messaging-api-swagger.yaml" target="_blank">View messaging in Swagger UI</a>
      version: 1.0.0
    servers:
      - url: 'https://private-tapi.telstra.com/v1/message'
        description: Production OKAPI2
    paths:
      /customer.json:
        get:
          tags:
            - Payment history
          summary: Invoke the provisioning API to get a dedicated mobile number for an account or application
          parameters:
            - name: Authorization
              in: header
              description: Bearer <<accessToken>>
              required: false
              schema:
                type: string
                format: string
          description: |
            Invoke the provisioning API to get a dedicated mobile number for an account or application.
          security:
            - oauth2ClientCredentials:
                - SERVICE-PAYMENTS
          responses:
            '200':
              description: successful response
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/GetHistoryResponse'
            '400':
              description: Invalid request
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/ErrorResponse'
            '401':
              description: Unauthorized
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/ErrorResponse'
            '403':
              description: Forbidden
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/ErrorResponse'
            '422':
              description: Unprocessable Entity
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/ErrorResponse'
            '500':
              description: Error response
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/ErrorResponse'
            default:
              description: any error
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/ErrorResponse'
          x-code-samples:
            - lang: curl
              source: |
                #!/bin/bash
                curl -X GET \
                https://tapi.telstra.com/v1/message \
                -H 'Authorization: Basic Base64(username/pwd)' \
                -H 'Cache-Control: no-cache' \
                -H 'Content-Type: application/json' \
                -
    components:
      securitySchemes:
        oauth2ClientCredentials:
          type: oauth2
          flows:
            clientCredentials:
              tokenUrl: 'https://private-tapi.telstra.com/v2/oauth/token'
              scopes:
                SERVICE-PAYMENTS: Grants
      schemas:
        ErrorResponse:
          type: object
          properties:
            time:
              type: string
              format: date-time
              description: The date and time when the message was received by recipient.
            message:
              type: string
              description: First error message from errors array.
            errors:
              type: array
              items:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    description: error code
                  message:
                    type: string
                    description: error message
              description: Array of errors.
            correlationId:
              type: string
              description: Correlation id of the message receieved
          example:
            time: '2016-07-01T16:11:39+10:00'
            message: 'Invalid request, please check'
            correlationId: f7c94213-36df-44cc-935f-025bb52cad42
            errors:
              - code: -1
                message: 'Invalid request, please check'
        GetHistoryResponse:
          type: object
          properties:
            code:
              type: integer
              example: 200
            applicationLabel:
              type: string
              example: sample
            time:
              type: string
              example: '2018-07-02T10:54:24.792+1000'
            correlationId:
              type: string
              example: 09c7a592-ee16-44d9-aeea-dd88dcaf1639
            data:
              $ref: '#/components/schemas/GetHistoryResponseObject'
        GetHistoryResponseObject:
          type: object
          properties:
            transactions:
              $ref: '#/components/schemas/HistoryResponseObject'
        HistoryResponseObject:
          type: array
          items:
            properties:
              id:
                type: string
                description: payment transaction id
                example: receiptId
              type:
                type: string
                enum:
                  - sale
                  - credit
                default: sale
                description: normal transaction or refunded transaction
              status:
                type: string
                enum:
                  - AuthorizationExpired
                  - Authorized
                  - Authorizing
                  - SettlementPending
                  - SettlementDeclined
                  - Failed
                  - GatewayRejected
                  - ProcessorDeclined
                  - Settled
                  - Settling
                  - SubmittedForSettlement
                  - Voided
                description: 'refer to https://developers.braintreepayments.com/reference/response/transaction/ruby#status'
                example: Authorized
              currency:
                type: string
                enum:
                  - AUD
                description: 'currency, default AUD'
                example: AUD
              amount:
                type: integer
                description: 'transaction amount, in cents'
                example: 100
              orderId:
                type: string
                description: orderId
                example: orderId
              refundIds:
                type: array
                items:
                  type: string
                description: array of refund ids processed
                example:
                  - '0123'
                  - '456'
              customFields:
                $ref: '#/components/schemas/CustomFieldObject'
              createdAt:
                type: string
                example: '2018-07-02T00:54:25.000+0000'
              paymentMethod:
                $ref: '#/components/schemas/CreditCardResponseObject'
        CustomFieldObject:
          type: object
          description: custom field object
          properties:
            agreementId:
              type: string
              description: mapped from agreement_id
            channelCommonName:
              type: string
              description: mapped from channel_common_name
            externalPaymentReference:
              type: string
              description: mapped from external_payment_reference
            customerAccountId:
              type: string
              description: mapped from customer_account_id
        PaymentMethodResponseObject:
          type: object
          discriminator:
            propertyName: type
          properties:
            type:
              type: string
              enum:
                - CREDIT_CARD
              default: CREDIT_CARD
              description: credit card
            last4:
              type: string
              description: last 4 digits of credit card
              example: '1234'
          required:
            - status
            - type
        CreditCardResponseObject:
          description: CreditCard representation of a PaymentMethodResponseObject
          allOf:
            - $ref: '#/components/schemas/PaymentMethodResponseObject'
            - type: object
              properties:
                cardType:
                  type: string
                  enum:
                    - AMEX
                    - VISA
                    - MASTER_CARD
                  description: credit card type
              required:
                - cardType
    ...
